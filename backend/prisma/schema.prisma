// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid())
  email                  String    @unique
  password               String
  firstName              String
  lastName               String
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  about                  String?
  profileProgress        Int       @default(0)
  profileImage           String? // Cloudinary URL for profile image
  role                   String    @default("STUDENT") // "ADMIN", "INSTRUCTOR", "STUDENT"
  isVerified             Boolean   @default(false)
  resetPasswordToken     String?
  emailVerificationToken String?
  verificationCode       String?
  verificationCodeExpiry DateTime?

  coursesEnrolled   CourseEnrollment[]        @relation("UserEnrollments")
  coursesTaught     Course[]
  reviews           CourseReview[]            @relation("UserReviews")
  quizzes           QuizAttempt[]             @relation("UserQuizAttempts")
  discussions       DiscussionPost[]          @relation("UserDiscussionPosts")
  messagesSent      Message[]                 @relation("SenderMessages")
  messagesReceived  Message[]                 @relation("ReceiverMessages")
  lessonCompletions StudentLessonCompletion[] @relation("UserLessonCompletions")
}

model Course {
  id            String         @id @default(uuid())
  title         String
  description   String
  objectives    String // Store as JSON string
  prerequisites String // Store as JSON string
  category      CourseCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  difficulty    String // "BEGINNER", "INTERMEDIATE", "ADVANCED"
  instructor    User           @relation(fields: [instructorId], references: [id])
  instructorId  String
  price         Float
  imageUrl      String? // Course thumbnail image
  imagePublicId String? // Cloudinary public ID for image
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  modules     CourseModule[]
  enrollments CourseEnrollment[] @relation("CourseEnrollments")
  reviews     CourseReview[]     @relation("CourseReviews")
  discussions CourseDiscussion[]
}

model CourseCategory {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model CourseModule {
  id          String   @id @default(uuid())
  title       String
  description String?
  order       Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  lessons     Lesson[]
}

model Lesson {
  id                String                    @id @default(uuid())
  title             String
  description       String?
  contentType       String // 'video', 'pdf', 'text', 'image'
  contentUrl        String? // Cloudinary URL to video, PDF, or text content
  contentPublicId   String? // Cloudinary public ID for content
  thumbnailUrl      String? // Video thumbnail URL
  thumbnailPublicId String? // Cloudinary public ID for thumbnail
  fileSize          Int? // File size in bytes
  duration          Int? // Video duration in seconds
  order             Int
  module            CourseModule              @relation(fields: [moduleId], references: [id])
  moduleId          String
  completedBy       StudentLessonCompletion[]
  quizzes           Quiz[]
}

model StudentLessonCompletion {
  id          String   @id @default(uuid())
  student     User     @relation("UserLessonCompletions", fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId   String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String
  completedAt DateTime @default(now())
}

model CourseEnrollment {
  id             String    @id @default(uuid())
  student        User      @relation("UserEnrollments", fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId      String
  course         Course    @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId       String
  enrolledAt     DateTime  @default(now())
  progress       Float     @default(0) // 0-100%
  completed      Boolean   @default(false)
  completedAt    DateTime?
  certificateUrl String?
}

model CourseReview {
  id        String   @id @default(uuid())
  rating    Int // 1-5
  comment   String?
  student   User     @relation("UserReviews", fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId String
  course    Course   @relation("CourseReviews", fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId  String
  createdAt DateTime @default(now())
}

model Quiz {
  id          String         @id @default(uuid())
  title       String
  description String?
  lesson      Lesson         @relation(fields: [lessonId], references: [id])
  lessonId    String         @unique
  timeLimit   Int? // in minutes
  questions   QuizQuestion[]
  attempts    QuizAttempt[]  @relation("QuizAttempts")
}

model QuizQuestion {
  id            String @id @default(uuid())
  text          String
  type          String // "MCQ", "TEXT"
  quiz          Quiz   @relation(fields: [quizId], references: [id])
  quizId        String
  options       String // Store as JSON string for MCQ
  correctAnswer String // For MCQ, or expected text for Text type
}

model QuizAttempt {
  id          String   @id @default(uuid())
  student     User     @relation("UserQuizAttempts", fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentId   String
  quiz        Quiz     @relation("QuizAttempts", fields: [quizId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quizId      String
  score       Float?
  submittedAt DateTime @default(now())
  answers     String // Store user's answers as JSON string
  isCompleted Boolean  @default(false)
}

// Optional Discussion & Communication
model CourseDiscussion {
  id       String           @id @default(uuid())
  title    String
  course   Course           @relation(fields: [courseId], references: [id])
  courseId String
  posts    DiscussionPost[] @relation("DiscussionPosts")
}

model DiscussionPost {
  id           String           @id @default(uuid())
  content      String
  user         User             @relation("UserDiscussionPosts", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId       String
  discussion   CourseDiscussion @relation("DiscussionPosts", fields: [discussionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  discussionId String
  parentPost   DiscussionPost?  @relation("ParentChildPosts", fields: [parentPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentPostId String?
  replies      DiscussionPost[] @relation("ParentChildPosts")
  createdAt    DateTime         @default(now())
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  senderId   String
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}
